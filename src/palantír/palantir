#! /usr/bin/env bash

# What has changed lately?

# by torstein.k.johansen@gmail.com

set -o errexit
set -o nounset
set -o pipefail

source $(dirname "$0")/../common/text/color.sh
source $(dirname "$0")/../common/indispensable.sh
# source $(dirname "$0")/../common/common-exit-hook.sh

read_user_input() {
  local OPTS=
  OPTS=$(getopt \
           -o fhc:d:o: \
           --long conf: \
           --long days-back: \
           --long format: \
           --long full \
           --long help \
           -n 'parse-options' \
           -- "$@")
  if [ $? != 0 ] ; then
    echo "Failed parsing options." >&2
    exit 1
  fi
  eval set -- "$OPTS"

  while true; do
    case "$1" in
      -c | --conf )
        conf_file="$2";
        shift 2;;
      -o | --format )
        output_format="$2";
        shift 2;;
      -d | --days-back )
        days_back="$2";
        shift 2;;
      -f | --full )
        full_listing=1
        shift;;
      -h | --help )
        show_help_and_exit;
        break;;
      -- )
        shift;
        break ;;
      * )
        break ;;
    esac
  done

  rest_of_args=$*
}

show_help_and_exit() {
  cat <<EOF
Usage: ${BASH_SOURCE[0]} OPTIONS

OPTIONS

-h, --help       Don't panic.
-f, --full       Detailed output
-d, --days-back  Number of days back
EOF

  exit 0
}


list_issues_change_since() {
  local since=${days_back}.days
  local branch=develop

  mkdir -p "${src_dir}"/.
  for git_repo in ${git_repo_list}; do
    repo_name=$(basename "${git_repo}" .git)
    echo "Changes in $(green "${repo_name}") on the $(blue ${branch}) branch last ${since}:"
    dir=${src_dir}/${repo_name}
    if [ -d "${dir}" ]; then
      (
        cd "${dir}" || exit 1
        git pull &> /dev/null || {
          echo "Couldn't pull $(red "${repo_name}"), using offline"
        }
      )
    else
      (
        cd "${src_dir}" &&
          git clone "${git_repo}" &> /dev/null
      )
    fi
    MAX_MESSAGE_LENGTH=72
    (
      local git_log=

      cd "${dir}" &&
        git checkout "${branch}" &> /dev/null || {
          branch=master
          git checkout "${branch}" &> /dev/null
        } &&
          git_log=$(
            git log --pretty=format:"%s ~ %ae ~ %ai ~ %h" --no-merges --since="${since}" |
              sed  '/Automatic merge from/d' |
              sort)
      if [ -n "${git_log}" ]; then
        echo "${git_log}" | while read -r line; do
          IFS='~' read -r message author date sha <<< "${line}"
          result=""
          if [[ ${message} =~ ^[A-Z]+-[0-9]+.* && ${full_listing-0} -eq 0 ]]; then
            result=${jira_base_url-""}/$(
              echo "${message}" | cut -d' ' -f1 | cut -d':' -f1)
          else
            result=$(get_message "${message}")
          fi

          result="${result}$(yellow "${date}")$(red "${author}")"
          if [ ${full_listing-0} -eq 1 ]; then
            result="${result}$(blue "${sha}")"
          fi
          echo "${result}"
        done |
          sort -u -k1,1
      fi
    )

  done

}

## $1 :: message
get_message() {
  local message=$1
  local result=
  if [ ${#message} -gt ${MAX_MESSAGE_LENGTH} ]; then
    result="${message:0:${MAX_MESSAGE_LENGTH}} (â€¦)"
  else
    result="${message}"
  fi
  echo "${result}"
}

read_conf() {
  source ${conf_file} || {
    print "You must have a conf file: ${conf_file}"
    cat <<EOF
src_dir=\$HOME/src/palantir-src
git_repo_list="
  ssh://git@example.com/foo.git
  ssh://git@example.com/bar.git
"
EOF
  }

}


main() {
  days_back=7
  touch "$HOME/.$(basename "$0").log"
  read_user_input "$@"
  read_conf
  list_issues_change_since "${days_back}"

}

main "$@"
