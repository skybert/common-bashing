#! /usr/bin/env bash

declare -a url_list_200_ok_and_xml=()
number_of_errors=0
number_of_tests=0

flag_error() {
  echo -n "E"

  local message=$*
  message=$(
    echo "$*" | sed -r 's#http://(.*:.*@)#http://#')

  if [ -n "${errors}" ]; then
    errors="${errors}
   ☠ ${FUNCNAME[1]} ${message}"
  else
    errors="   ☠ ${FUNCNAME[1]} ${message}"
  fi

  ((number_of_errors++))
}

print_report() {
  if [ -n "${errors}" ]; then
    echo -e "\n${errors}" | sort
  else
    echo ""
  fi

  echo "Tests run:" \
       "$(blue $((number_of_tests)));" \
       "success: $(green $((number_of_tests - number_of_errors)));" \
       "error: $(red ${number_of_errors});"
}

bootstrap_thyself() {
  source $(dirname "$0")/../common/text/color.sh || {
    echo "I need my colours, even with a 'u'"
    exit 1
  }
}

check_list_of_urls_that_should_return_200() {
  if [ "${has_initialised_ece_instance_check}" -eq 0 ]; then
    init_check_ece_instances
  fi

  _tmp=$(declare -p url_list_200_ok_and_xml)
  eval "declare -a url_list_200_ok_and_xml=${_tmp#*=}"

  for el in "${url_list_200_ok_and_xml[@]}"; do
    ((number_of_tests++))
    local uri_fragment=${el##http://${host_and_port}}

    if [ "${verbose-0}" -eq 1 ]; then
      echo "Verifying 200 OK and well formed XML: ${uri_fragment} ..."
    else
      echo -n "."
    fi

    curl -s -I "${el}" | grep --quiet "^HTTP/1.1 200 OK"
    if [ $? -ne 0 ]; then
      flag_error "${uri_fragment} did NOT return 200 OK"
      continue
    fi

    curl -s "${el}" | xmllint --format - > /dev/null || {
      flag_error "${uri_fragment} isn't well formed XML"
    }
  done
}

main() {
  bootstrap_thyself

  # create_conf
  local file=
  file="$HOME/.$(basename "$0").conf"

  source -- "${file}" || {
    echo "You need a ${file}"
    exit 1
  }

  for f in "$(dirname "$0")/checks/"*.sh; do
    source "${f}" || exit 1
  done

  for check_method in $(declare -f | grep ^check_ | awk '{print $1}' | sort); do
    ((number_of_tests++))
    ${check_method}
    echo -n "."
  done
  print_report
}

main "$*"
